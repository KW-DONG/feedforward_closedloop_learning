# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_deep_feedback_learning', [dirname(__file__)])
        except ImportError:
            import _deep_feedback_learning
            return _deep_feedback_learning
        if fp is not None:
            try:
                _mod = imp.load_module('_deep_feedback_learning', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _deep_feedback_learning = swig_import_helper()
    del swig_import_helper
else:
    import _deep_feedback_learning
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class DeepFeedbackLearning(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeepFeedbackLearning, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeepFeedbackLearning, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _deep_feedback_learning.new_DeepFeedbackLearning(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _deep_feedback_learning.delete_DeepFeedbackLearning
    __del__ = lambda self: None
    backprop = _deep_feedback_learning.DeepFeedbackLearning_backprop
    ico = _deep_feedback_learning.DeepFeedbackLearning_ico

    def doStep(self, *args) -> "void":
        return _deep_feedback_learning.DeepFeedbackLearning_doStep(self, *args)

    def doForwardProp(self, *args) -> "void":
        return _deep_feedback_learning.DeepFeedbackLearning_doForwardProp(self, *args)

    def doErrorProp(self, *args) -> "void":
        return _deep_feedback_learning.DeepFeedbackLearning_doErrorProp(self, *args)

    def getOutput(self, index: 'int') -> "double":
        return _deep_feedback_learning.DeepFeedbackLearning_getOutput(self, index)

    def setLearningRate(self, learningRate: 'double') -> "void":
        return _deep_feedback_learning.DeepFeedbackLearning_setLearningRate(self, learningRate)

    def setAlgorithm(self, _algorithm: 'DeepFeedbackLearning::Algorithm') -> "void":
        return _deep_feedback_learning.DeepFeedbackLearning_setAlgorithm(self, _algorithm)

    def getAlgorithm(self) -> "DeepFeedbackLearning::Algorithm":
        return _deep_feedback_learning.DeepFeedbackLearning_getAlgorithm(self)

    def initWeights(self, max: 'double', initBias: 'int'=0) -> "void":
        return _deep_feedback_learning.DeepFeedbackLearning_initWeights(self, max, initBias)

    def seedRandom(self, s: 'int') -> "void":
        return _deep_feedback_learning.DeepFeedbackLearning_seedRandom(self, s)

    def setBias(self, _bias: 'double') -> "void":
        return _deep_feedback_learning.DeepFeedbackLearning_setBias(self, _bias)

    def getNumHidLayers(self) -> "int":
        return _deep_feedback_learning.DeepFeedbackLearning_getNumHidLayers(self)

    def getLayer(self, i: 'int') -> "Layer *":
        return _deep_feedback_learning.DeepFeedbackLearning_getLayer(self, i)

    def getOutputLayer(self) -> "Layer *":
        return _deep_feedback_learning.DeepFeedbackLearning_getOutputLayer(self)

    def getLayers(self) -> "Layer **":
        return _deep_feedback_learning.DeepFeedbackLearning_getLayers(self)

    def setUseDerivative(self, useIt: 'int') -> "void":
        return _deep_feedback_learning.DeepFeedbackLearning_setUseDerivative(self, useIt)
DeepFeedbackLearning_swigregister = _deep_feedback_learning.DeepFeedbackLearning_swigregister
DeepFeedbackLearning_swigregister(DeepFeedbackLearning)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr

    def __init__(self, _nNeurons: 'int', _nInputs: 'int', _nFilters: 'int'=0, _minT: 'double'=0, _maxT: 'double'=0):
        this = _deep_feedback_learning.new_Layer(_nNeurons, _nInputs, _nFilters, _minT, _maxT)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _deep_feedback_learning.delete_Layer
    __del__ = lambda self: None

    def calcOutputs(self) -> "void":
        return _deep_feedback_learning.Layer_calcOutputs(self)

    def doLearning(self) -> "void":
        return _deep_feedback_learning.Layer_doLearning(self)

    def setError(self, *args) -> "void":
        return _deep_feedback_learning.Layer_setError(self, *args)

    def setErrors(self, _errors: 'double *') -> "void":
        return _deep_feedback_learning.Layer_setErrors(self, _errors)

    def getError(self, i: 'int') -> "double":
        return _deep_feedback_learning.Layer_getError(self, i)

    def setBias(self, _bias: 'double') -> "void":
        return _deep_feedback_learning.Layer_setBias(self, _bias)

    def setUseDerivative(self, useIt: 'int') -> "void":
        return _deep_feedback_learning.Layer_setUseDerivative(self, useIt)

    def setInput(self, inputIndex: 'int', input: 'double') -> "void":
        return _deep_feedback_learning.Layer_setInput(self, inputIndex, input)

    def setInputs(self, _inputs: 'double *') -> "void":
        return _deep_feedback_learning.Layer_setInputs(self, _inputs)

    def setLearningRate(self, _learningRate: 'double') -> "void":
        return _deep_feedback_learning.Layer_setLearningRate(self, _learningRate)

    def initWeights(self, _max: 'double', initBiasWeight: 'int'=0) -> "void":
        return _deep_feedback_learning.Layer_initWeights(self, _max, initBiasWeight)

    def getOutput(self, index: 'int') -> "double":
        return _deep_feedback_learning.Layer_getOutput(self, index)

    def getNeuron(self, index: 'int') -> "Neuron *":
        return _deep_feedback_learning.Layer_getNeuron(self, index)

    def getNneurons(self) -> "int":
        return _deep_feedback_learning.Layer_getNneurons(self)

    def getNinputs(self) -> "int":
        return _deep_feedback_learning.Layer_getNinputs(self)
Layer_swigregister = _deep_feedback_learning.Layer_swigregister
Layer_swigregister(Layer)

class Neuron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Neuron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Neuron, name)
    __repr__ = _swig_repr

    def __init__(self, _nInputs: 'int', _nFilters: 'int'=0, _minT: 'double'=0, _maxT: 'double'=0):
        this = _deep_feedback_learning.new_Neuron(_nInputs, _nFilters, _minT, _maxT)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _deep_feedback_learning.delete_Neuron
    __del__ = lambda self: None

    def calcOutput(self) -> "void":
        return _deep_feedback_learning.Neuron_calcOutput(self)
    __swig_getmethods__["calcOutputThread"] = lambda x: _deep_feedback_learning.Neuron_calcOutputThread
    if _newclass:
        calcOutputThread = staticmethod(_deep_feedback_learning.Neuron_calcOutputThread)

    def doLearning(self) -> "void":
        return _deep_feedback_learning.Neuron_doLearning(self)
    __swig_getmethods__["doLearningThread"] = lambda x: _deep_feedback_learning.Neuron_doLearningThread
    if _newclass:
        doLearningThread = staticmethod(_deep_feedback_learning.Neuron_doLearningThread)

    def initWeights(self, _max: 'double', initBias: 'int') -> "void":
        return _deep_feedback_learning.Neuron_initWeights(self, _max, initBias)

    def getOutput(self) -> "double":
        return _deep_feedback_learning.Neuron_getOutput(self)

    def getSum(self) -> "double":
        return _deep_feedback_learning.Neuron_getSum(self)

    def getWeight(self, _index: 'int', _filter: 'int'=0) -> "double":
        return _deep_feedback_learning.Neuron_getWeight(self, _index, _filter)

    def getAvgWeight(self, _input: 'int'=-1) -> "double":
        return _deep_feedback_learning.Neuron_getAvgWeight(self, _input)

    def setWeight(self, _index: 'int', _weight: 'double', _filter: 'int'=0) -> "void":
        return _deep_feedback_learning.Neuron_setWeight(self, _index, _weight, _filter)

    def setError(self, _error: 'double') -> "void":
        return _deep_feedback_learning.Neuron_setError(self, _error)

    def getError(self) -> "double":
        return _deep_feedback_learning.Neuron_getError(self)

    def setInput(self, _index: 'int', _value: 'double') -> "void":
        return _deep_feedback_learning.Neuron_setInput(self, _index, _value)

    def getInput(self, _index: 'int') -> "double":
        return _deep_feedback_learning.Neuron_getInput(self, _index)

    def setBias(self, _bias: 'double') -> "void":
        return _deep_feedback_learning.Neuron_setBias(self, _bias)

    def setLearningRate(self, _learningrate: 'double') -> "void":
        return _deep_feedback_learning.Neuron_setLearningRate(self, _learningrate)

    def setUseDerivative(self, _useDerivative: 'int') -> "void":
        return _deep_feedback_learning.Neuron_setUseDerivative(self, _useDerivative)

    def getNinputs(self) -> "int":
        return _deep_feedback_learning.Neuron_getNinputs(self)
Neuron_swigregister = _deep_feedback_learning.Neuron_swigregister
Neuron_swigregister(Neuron)

def Neuron_calcOutputThread(object: 'void *') -> "void *":
    return _deep_feedback_learning.Neuron_calcOutputThread(object)
Neuron_calcOutputThread = _deep_feedback_learning.Neuron_calcOutputThread

def Neuron_doLearningThread(object: 'void *') -> "void *":
    return _deep_feedback_learning.Neuron_doLearningThread(object)
Neuron_doLearningThread = _deep_feedback_learning.Neuron_doLearningThread

# This file is compatible with both classic and new-style classes.


