# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_deep_ico')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_deep_ico')
    _deep_ico = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_deep_ico', [dirname(__file__)])
        except ImportError:
            import _deep_ico
            return _deep_ico
        try:
            _mod = imp.load_module('_deep_ico', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _deep_ico = swig_import_helper()
    del swig_import_helper
else:
    import _deep_ico
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Deep_ICO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Deep_ICO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Deep_ICO, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _deep_ico.new_Deep_ICO(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deep_ico.delete_Deep_ICO
    __del__ = lambda self: None
    backprop = _deep_ico.Deep_ICO_backprop
    ico = _deep_ico.Deep_ICO_ico

    def doStep(self, *args):
        return _deep_ico.Deep_ICO_doStep(self, *args)

    def getOutput(self, index):
        return _deep_ico.Deep_ICO_getOutput(self, index)

    def setLearningRate(self, learningRate):
        return _deep_ico.Deep_ICO_setLearningRate(self, learningRate)

    def setAlgorithm(self, _algorithm):
        return _deep_ico.Deep_ICO_setAlgorithm(self, _algorithm)

    def getAlgorithm(self):
        return _deep_ico.Deep_ICO_getAlgorithm(self)

    def initWeights(self, max):
        return _deep_ico.Deep_ICO_initWeights(self, max)

    def seedRandom(self, s):
        return _deep_ico.Deep_ICO_seedRandom(self, s)

    def getHiddenLayer(self):
        return _deep_ico.Deep_ICO_getHiddenLayer(self)

    def getOutputLayer(self):
        return _deep_ico.Deep_ICO_getOutputLayer(self)

    def setUseDerivative(self, useIt):
        return _deep_ico.Deep_ICO_setUseDerivative(self, useIt)
Deep_ICO_swigregister = _deep_ico.Deep_ICO_swigregister
Deep_ICO_swigregister(Deep_ICO)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr

    def __init__(self, _nNeurons, _nInputs, _nFilters=0, _minT=0, _maxT=0):
        this = _deep_ico.new_Layer(_nNeurons, _nInputs, _nFilters, _minT, _maxT)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deep_ico.delete_Layer
    __del__ = lambda self: None

    def calcOutputs(self):
        return _deep_ico.Layer_calcOutputs(self)

    def doLearning(self):
        return _deep_ico.Layer_doLearning(self)

    def setError(self, *args):
        return _deep_ico.Layer_setError(self, *args)

    def setErrors(self, _errors):
        return _deep_ico.Layer_setErrors(self, _errors)

    def getError(self, i):
        return _deep_ico.Layer_getError(self, i)

    def setUseDerivative(self, useIt):
        return _deep_ico.Layer_setUseDerivative(self, useIt)

    def setInput(self, inputIndex, input):
        return _deep_ico.Layer_setInput(self, inputIndex, input)

    def setInputs(self, _inputs):
        return _deep_ico.Layer_setInputs(self, _inputs)

    def setLearningRate(self, _learningRate):
        return _deep_ico.Layer_setLearningRate(self, _learningRate)

    def initWeights(self, _max):
        return _deep_ico.Layer_initWeights(self, _max)

    def getOutput(self, index):
        return _deep_ico.Layer_getOutput(self, index)

    def getNeuron(self, index):
        return _deep_ico.Layer_getNeuron(self, index)

    def getNneurons(self):
        return _deep_ico.Layer_getNneurons(self)

    def getNinputs(self):
        return _deep_ico.Layer_getNinputs(self)
Layer_swigregister = _deep_ico.Layer_swigregister
Layer_swigregister(Layer)

class Neuron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Neuron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Neuron, name)
    __repr__ = _swig_repr

    def __init__(self, _nInputs, _nFilters=0, _minT=0, _maxT=0):
        this = _deep_ico.new_Neuron(_nInputs, _nFilters, _minT, _maxT)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _deep_ico.delete_Neuron
    __del__ = lambda self: None

    def calcOutput(self):
        return _deep_ico.Neuron_calcOutput(self)

    def doLearning(self):
        return _deep_ico.Neuron_doLearning(self)

    def initWeights(self, _max):
        return _deep_ico.Neuron_initWeights(self, _max)

    def getOutput(self):
        return _deep_ico.Neuron_getOutput(self)

    def getSum(self):
        return _deep_ico.Neuron_getSum(self)

    def getWeight(self, _index, _filter=0):
        return _deep_ico.Neuron_getWeight(self, _index, _filter)

    def setWeight(self, _index, _weight, _filter=0):
        return _deep_ico.Neuron_setWeight(self, _index, _weight, _filter)

    def setError(self, _error):
        return _deep_ico.Neuron_setError(self, _error)

    def getError(self):
        return _deep_ico.Neuron_getError(self)

    def setInput(self, _index, _value):
        return _deep_ico.Neuron_setInput(self, _index, _value)

    def getInput(self, _index):
        return _deep_ico.Neuron_getInput(self, _index)

    def setBias(self, _bias):
        return _deep_ico.Neuron_setBias(self, _bias)

    def setLearningRate(self, _learningrate):
        return _deep_ico.Neuron_setLearningRate(self, _learningrate)

    def setUseDerivative(self, _useDerivative):
        return _deep_ico.Neuron_setUseDerivative(self, _useDerivative)
Neuron_swigregister = _deep_ico.Neuron_swigregister
Neuron_swigregister(Neuron)

# This file is compatible with both classic and new-style classes.


