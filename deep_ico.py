# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_deep_ico', [dirname(__file__)])
        except ImportError:
            import _deep_ico
            return _deep_ico
        if fp is not None:
            try:
                _mod = imp.load_module('_deep_ico', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _deep_ico = swig_import_helper()
    del swig_import_helper
else:
    import _deep_ico
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class Deep_ICO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Deep_ICO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Deep_ICO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hiddenLayer"] = _deep_ico.Deep_ICO_hiddenLayer_set
    __swig_getmethods__["hiddenLayer"] = _deep_ico.Deep_ICO_hiddenLayer_get
    if _newclass:
        hiddenLayer = _swig_property(_deep_ico.Deep_ICO_hiddenLayer_get, _deep_ico.Deep_ICO_hiddenLayer_set)
    __swig_setmethods__["outputLayer"] = _deep_ico.Deep_ICO_outputLayer_set
    __swig_getmethods__["outputLayer"] = _deep_ico.Deep_ICO_outputLayer_get
    if _newclass:
        outputLayer = _swig_property(_deep_ico.Deep_ICO_outputLayer_get, _deep_ico.Deep_ICO_outputLayer_set)
    __swig_setmethods__["neuronsPerLayer"] = _deep_ico.Deep_ICO_neuronsPerLayer_set
    __swig_getmethods__["neuronsPerLayer"] = _deep_ico.Deep_ICO_neuronsPerLayer_get
    if _newclass:
        neuronsPerLayer = _swig_property(_deep_ico.Deep_ICO_neuronsPerLayer_get, _deep_ico.Deep_ICO_neuronsPerLayer_set)
    __swig_setmethods__["nInputsPerNeuron"] = _deep_ico.Deep_ICO_nInputsPerNeuron_set
    __swig_getmethods__["nInputsPerNeuron"] = _deep_ico.Deep_ICO_nInputsPerNeuron_get
    if _newclass:
        nInputsPerNeuron = _swig_property(_deep_ico.Deep_ICO_nInputsPerNeuron_get, _deep_ico.Deep_ICO_nInputsPerNeuron_set)

    def __init__(self, _neuronsPerLayer: 'int', _nInputsPerNeuron: 'int'):
        this = _deep_ico.new_Deep_ICO(_neuronsPerLayer, _nInputsPerNeuron)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _deep_ico.delete_Deep_ICO
    __del__ = lambda self: None

    def doStep(self) -> "void":
        return _deep_ico.Deep_ICO_doStep(self)

    def setLearningRate(self, learningRate: 'float') -> "void":
        return _deep_ico.Deep_ICO_setLearningRate(self, learningRate)
Deep_ICO_swigregister = _deep_ico.Deep_ICO_swigregister
Deep_ICO_swigregister(Deep_ICO)

class Layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nNeurons"] = _deep_ico.Layer_nNeurons_set
    __swig_getmethods__["nNeurons"] = _deep_ico.Layer_nNeurons_get
    if _newclass:
        nNeurons = _swig_property(_deep_ico.Layer_nNeurons_get, _deep_ico.Layer_nNeurons_set)
    __swig_setmethods__["nInputs"] = _deep_ico.Layer_nInputs_set
    __swig_getmethods__["nInputs"] = _deep_ico.Layer_nInputs_get
    if _newclass:
        nInputs = _swig_property(_deep_ico.Layer_nInputs_get, _deep_ico.Layer_nInputs_set)
    __swig_setmethods__["neurons"] = _deep_ico.Layer_neurons_set
    __swig_getmethods__["neurons"] = _deep_ico.Layer_neurons_get
    if _newclass:
        neurons = _swig_property(_deep_ico.Layer_neurons_get, _deep_ico.Layer_neurons_set)

    def __init__(self, _nNeurons: 'int', _nInputs: 'int'):
        this = _deep_ico.new_Layer(_nNeurons, _nInputs)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _deep_ico.delete_Layer
    __del__ = lambda self: None

    def calcOutputs(self) -> "void":
        return _deep_ico.Layer_calcOutputs(self)

    def doLearning(self) -> "void":
        return _deep_ico.Layer_doLearning(self)

    def setError(self, *args) -> "void":
        return _deep_ico.Layer_setError(self, *args)

    def getError(self, i: 'int') -> "float":
        return _deep_ico.Layer_getError(self, i)

    def setInput(self, inputIndex: 'int', input: 'float') -> "void":
        return _deep_ico.Layer_setInput(self, inputIndex, input)

    def setLearningRate(self, _learningRate: 'float') -> "void":
        return _deep_ico.Layer_setLearningRate(self, _learningRate)
Layer_swigregister = _deep_ico.Layer_swigregister
Layer_swigregister(Layer)

class Neuron(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Neuron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Neuron, name)
    __repr__ = _swig_repr

    def __init__(self, _nInputs: 'int'):
        this = _deep_ico.new_Neuron(_nInputs)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _deep_ico.delete_Neuron
    __del__ = lambda self: None

    def calcOutput(self) -> "void":
        return _deep_ico.Neuron_calcOutput(self)

    def doLearning(self) -> "void":
        return _deep_ico.Neuron_doLearning(self)
    __swig_setmethods__["nInputs"] = _deep_ico.Neuron_nInputs_set
    __swig_getmethods__["nInputs"] = _deep_ico.Neuron_nInputs_get
    if _newclass:
        nInputs = _swig_property(_deep_ico.Neuron_nInputs_get, _deep_ico.Neuron_nInputs_set)
    __swig_setmethods__["weights"] = _deep_ico.Neuron_weights_set
    __swig_getmethods__["weights"] = _deep_ico.Neuron_weights_get
    if _newclass:
        weights = _swig_property(_deep_ico.Neuron_weights_get, _deep_ico.Neuron_weights_set)
    __swig_setmethods__["inputs"] = _deep_ico.Neuron_inputs_set
    __swig_getmethods__["inputs"] = _deep_ico.Neuron_inputs_get
    if _newclass:
        inputs = _swig_property(_deep_ico.Neuron_inputs_get, _deep_ico.Neuron_inputs_set)
    __swig_setmethods__["output"] = _deep_ico.Neuron_output_set
    __swig_getmethods__["output"] = _deep_ico.Neuron_output_get
    if _newclass:
        output = _swig_property(_deep_ico.Neuron_output_get, _deep_ico.Neuron_output_set)
    __swig_setmethods__["sum"] = _deep_ico.Neuron_sum_set
    __swig_getmethods__["sum"] = _deep_ico.Neuron_sum_get
    if _newclass:
        sum = _swig_property(_deep_ico.Neuron_sum_get, _deep_ico.Neuron_sum_set)
    __swig_setmethods__["bias"] = _deep_ico.Neuron_bias_set
    __swig_getmethods__["bias"] = _deep_ico.Neuron_bias_get
    if _newclass:
        bias = _swig_property(_deep_ico.Neuron_bias_get, _deep_ico.Neuron_bias_set)
    __swig_setmethods__["error"] = _deep_ico.Neuron_error_set
    __swig_getmethods__["error"] = _deep_ico.Neuron_error_get
    if _newclass:
        error = _swig_property(_deep_ico.Neuron_error_get, _deep_ico.Neuron_error_set)
    __swig_setmethods__["learningRate"] = _deep_ico.Neuron_learningRate_set
    __swig_getmethods__["learningRate"] = _deep_ico.Neuron_learningRate_get
    if _newclass:
        learningRate = _swig_property(_deep_ico.Neuron_learningRate_get, _deep_ico.Neuron_learningRate_set)
Neuron_swigregister = _deep_ico.Neuron_swigregister
Neuron_swigregister(Neuron)

# This file is compatible with both classic and new-style classes.


